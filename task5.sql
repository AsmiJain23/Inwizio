CREATE DATABASE FoodDeliveryApp;
USE FoodDeliveryApp;

CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    City VARCHAR(50) NOT NULL,
    CuisineType VARCHAR(50) NOT NULL,
    Rating DECIMAL(2, 1) NOT NULL,
    AverageCostForTwo DECIMAL(10, 2) NOT NULL
);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Phone VARCHAR(15) NOT NULL,
    City VARCHAR(50) NOT NULL,
    JoinDate DATE NOT NULL
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    OrderDate DATE NOT NULL,
    OrderAmount DECIMAL(10, 2) NOT NULL,
    OrderStatus ENUM('Delivered', 'Cancelled', 'Pending') NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    Rating DECIMAL(2, 1) NOT NULL,
    Comment TEXT,
    ReviewDate DATE NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT NOT NULL,
    PaymentMethod ENUM('Card', 'Cash', 'Wallet') NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentDate DATE NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

INSERT INTO Restaurants (Name, City, CuisineType, Rating, AverageCostForTwo)
VALUES 
('Spicy Delight', 'Mumbai', 'Indian', 4.7, 600.00),
('Pizza Hub', 'Mumbai', 'Italian', 4.3, 800.00),
('Dragon Wok', 'Delhi', 'Chinese', 4.5, 500.00),
('Sushi World', 'Bangalore', 'Japanese', 4.8, 1000.00),
('Burger King', 'Mumbai', 'American', 4.1, 350.00);

INSERT INTO Customers (FirstName, LastName, Phone, City, JoinDate)
VALUES
('Jiyu', 'advani', '9876543210', 'Mumbai', '2022-01-10'),
('Asmi', 'kaif', '9123456789', 'Delhi', '2023-04-05'),
('Ashi', 'jain', '9198765432', 'Bangalore', '2022-07-20'),
('upendra', 'taneja', '9001234567', 'Mumbai', '2023-02-15'),
('kiara', 'Dnb', '9345678901', 'Mumbai', '2024-01-25');


INSERT INTO Orders (CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus)
VALUES 
(1, 1, '2023-03-01', 600.00, 'Delivered'),
(2, 3, '2023-06-15', 450.00, 'Cancelled'),
(3, 2, '2023-05-20', 800.00, 'Delivered'),
(4, 4, '2023-07-10', 1200.00, 'Delivered'),
(5, 1, '2023-09-05', 550.00, 'Pending');

INSERT INTO Reviews (CustomerID, RestaurantID, Rating, Comment, ReviewDate)
VALUES 
(1, 1, 5.0, 'Excellent Indian food, highly recommend!', '2023-03-05'),
(2, 3, 4.0, 'Good food but the delivery was a bit late.', '2023-06-17'),
(3, 2, 4.5, 'Great Italian pizza, will order again!', '2023-05-22'),
(4, 4, 5.0, 'Amazing sushi and fast delivery!', '2023-07-12'),
(5, 1, 3.5, 'Decent, but could improve the flavor.', '2023-09-10');

INSERT INTO Payments (OrderID, PaymentMethod, Amount, PaymentDate)
VALUES 
(1, 'Card', 600.00, '2023-03-01'),
(2, 'Cash', 450.00, '2023-06-15'),
(3, 'Wallet', 800.00, '2023-05-20'),
(4, 'Card', 1200.00, '2023-07-10'),
(5, 'Wallet', 550.00, '2023-09-05');


-- 1 1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT Name, City
FROM Restaurants
WHERE Rating >= 4.5;

-- 2 Find the total number of orders placed by each customer.
SELECT c.FirstName, c.LastName, COUNT(o.OrderID) AS TotalOrders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;

-- 3 List all restaurants offering "Italian" cuisine in "Mumbai".
SELECT Name, City, CuisineType
FROM Restaurants
WHERE CuisineType = 'Italian' AND City = 'Mumbai';

-- 4 Calculate the total revenue generated by each restaurant from completed orders.

SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID;

-- 5 Retrieve the most recent order placed by each customer.
SELECT c.FirstName, c.LastName, o.OrderID, o.OrderDate, o.OrderAmount
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate = (
    SELECT MAX(OrderDate)
    FROM Orders o2
    WHERE o2.CustomerID = c.CustomerID
);

-- 6  List customers who have not placed any orders yet.
SELECT c.FirstName, c.LastName
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;

-- 7 Identify the most reviewed restaurants.

SELECT r.Name, COUNT(rv.ReviewID) AS ReviewCount
FROM Restaurants r
JOIN Reviews rv ON r.RestaurantID = rv.RestaurantID
GROUP BY r.RestaurantID
ORDER BY ReviewCount DESC
LIMIT 1;

-- 8 Find the most preferred payment method.
SELECT PaymentMethod, COUNT(*) AS Frequency
FROM Payments
GROUP BY PaymentMethod
ORDER BY Frequency DESC
LIMIT 1;

-- 9 List the top 5 restaurants by total revenue.
SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID
ORDER BY TotalRevenue DESC
LIMIT 5;


-- 10 Show the details of all cancelled orders along with the customer's and restaurant's names.

SELECT o.OrderID, o.OrderDate, o.OrderAmount, o.OrderStatus, c.FirstName AS CustomerFirstName, c.LastName AS CustomerLastName, r.Name AS RestaurantName
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';




